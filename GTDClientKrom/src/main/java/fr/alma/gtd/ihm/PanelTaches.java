/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * PanelFaire.java
 *
 * Created on 26 nov. 2009, 16:40:19
 */

package fr.alma.gtd.ihm;

import javax.swing.JFrame;
import fr.alma.gtd.ihm.renseignement.DialogFaire;
import fr.alma.gtd.entities.Tache;
import java.util.LinkedList;
import javax.swing.DefaultListModel;
import javax.swing.JCheckBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Le_Clubber
 */
public class PanelTaches extends javax.swing.JPanel {

	private Controleur controleur;
	private DefaultListModel listeTachesModel;
	private DefaultTableModel tableTacheModel;

    /** Creates new form PanelFaire */
    public PanelTaches() {
		this.controleur = Controleur.getInstance();
		this.listeTachesModel = new DefaultListModel();

        initComponents();
		initialisation();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableTache = new javax.swing.JTable(tableTacheModel);
        jSplitPane1 = new javax.swing.JSplitPane();
        panelContextes = new javax.swing.JPanel();
        labelContextes = new javax.swing.JLabel();
        panelCheckBox = new javax.swing.JPanel();
        checkAll = new javax.swing.JCheckBox();
        panelTaches = new javax.swing.JPanel();
        labelListeTache = new javax.swing.JLabel();
        scrollTaches = new javax.swing.JScrollPane();
        listeTaches = new javax.swing.JList(listeTachesModel);

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        tableTache.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nom", "Contexte", "Priorité", "Conteneur"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableTache.setEnabled(false);
        tableTache.setName("tableTache"); // NOI18N
        jScrollPane1.setViewportView(tableTache);

        setName("Form"); // NOI18N

        jSplitPane1.setDividerLocation(190);
        jSplitPane1.setName("jSplitPane1"); // NOI18N

        panelContextes.setEnabled(false);
        panelContextes.setName("panelContextes"); // NOI18N

        labelContextes.setText("Sélectionnez les contextes :");
        labelContextes.setEnabled(false);
        labelContextes.setName("labelContextes"); // NOI18N

        panelCheckBox.setName("panelCheckBox"); // NOI18N
        panelCheckBox.setLayout(new javax.swing.BoxLayout(panelCheckBox, javax.swing.BoxLayout.Y_AXIS));

        checkAll.setSelected(true);
        checkAll.setText("Tout");
        checkAll.setEnabled(false);
        checkAll.setName("checkAll"); // NOI18N
        checkAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkAllActionPerformed(evt);
            }
        });
        panelCheckBox.add(checkAll);

        javax.swing.GroupLayout panelContextesLayout = new javax.swing.GroupLayout(panelContextes);
        panelContextes.setLayout(panelContextesLayout);
        panelContextesLayout.setHorizontalGroup(
            panelContextesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContextesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelContextesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(panelCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 179, Short.MAX_VALUE)
                    .addComponent(labelContextes))
                .addContainerGap())
        );
        panelContextesLayout.setVerticalGroup(
            panelContextesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelContextesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelContextes)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(panelCheckBox, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setLeftComponent(panelContextes);

        panelTaches.setName("panelTaches"); // NOI18N

        labelListeTache.setText("Liste des tâches à traiter :");
        labelListeTache.setEnabled(false);
        labelListeTache.setName("labelListeTache"); // NOI18N

        scrollTaches.setName("scrollTaches"); // NOI18N

        listeTaches.setToolTipText("");
        listeTaches.setEnabled(false);
        listeTaches.setName("listeTaches"); // NOI18N
        listeTaches.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                listeTachesMousePressed(evt);
            }
        });
        scrollTaches.setViewportView(listeTaches);
        listeTaches.setCellRenderer(new MyListCellRenderer());

        javax.swing.GroupLayout panelTachesLayout = new javax.swing.GroupLayout(panelTaches);
        panelTaches.setLayout(panelTachesLayout);
        panelTachesLayout.setHorizontalGroup(
            panelTachesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTachesLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelTachesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollTaches, javax.swing.GroupLayout.DEFAULT_SIZE, 603, Short.MAX_VALUE)
                    .addComponent(labelListeTache))
                .addContainerGap())
        );
        panelTachesLayout.setVerticalGroup(
            panelTachesLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelTachesLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(labelListeTache)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(scrollTaches, javax.swing.GroupLayout.DEFAULT_SIZE, 523, Short.MAX_VALUE)
                .addContainerGap())
        );

        jSplitPane1.setRightComponent(panelTaches);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 823, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 570, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

		private void checkAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkAllActionPerformed
			selectAllCkeckbox(checkAll.isSelected());
			selectionContextes();
		}//GEN-LAST:event_checkAllActionPerformed

		private void listeTachesMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_listeTachesMousePressed
			if(evt.getButton() == java.awt.event.MouseEvent.BUTTON3){
				int index = listeTaches.locationToIndex(evt.getPoint());
				if (index != -1) {
					listeTaches.setSelectedIndex(index);
					javax.swing.JPopupMenu jpm = new javax.swing.JPopupMenu();
					javax.swing.JMenuItem eraseMenu = new javax.swing.JMenuItem("Effacer la tâche");
					eraseMenu.addActionListener(new ListEraseMenuListener(listeTaches.getSelectedValue()));
					jpm.add(eraseMenu);
					jpm.show(listeTaches, evt.getX(), evt.getY());
				}
			}
                    //Si double clic
                    if(evt.getClickCount()==2&&(!evt.isConsumed())){
                        evt.consume();
                        DialogFaire faire = new DialogFaire(new JFrame(),true,(Tache)listeTaches.getSelectedValue());
                        faire.setVisible(true);
                    }
		}//GEN-LAST:event_listeTachesMousePressed

	class ListEraseMenuListener implements java.awt.event.ActionListener{
		private Object object;
		public ListEraseMenuListener(Object obj){
			this.object = obj;
		}
		@Override
		public void actionPerformed(java.awt.event.ActionEvent e) {
			controleur.supprimerTache(object);
		}
	}
	
	class MyListCellRenderer extends javax.swing.DefaultListCellRenderer {
		@Override
		public java.awt.Component getListCellRendererComponent(javax.swing.JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {
			super.getListCellRendererComponent(list, value, index, isSelected, cellHasFocus);
			if (value instanceof javax.swing.JLabel) {
				javax.swing.JLabel label = (javax.swing.JLabel) value;
				setText(label.getText());
				setToolTipText(label.getToolTipText());
			}
			if (value instanceof Tache) {
				Tache tache = (Tache) value;
				setText(tache.toString());
				setToolTipText(controleur.getDescription(tache));
			}
			return this;
		}
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JCheckBox checkAll;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JLabel labelContextes;
    private javax.swing.JLabel labelListeTache;
    private javax.swing.JList listeTaches;
    private javax.swing.JPanel panelCheckBox;
    private javax.swing.JPanel panelContextes;
    private javax.swing.JPanel panelTaches;
    private javax.swing.JScrollPane scrollTaches;
    private javax.swing.JTable tableTache;
    // End of variables declaration//GEN-END:variables

	private void initialisation() {
		listeCheckBox = new LinkedList<JCheckBox>();
	}

	private LinkedList<JCheckBox> listeCheckBox;

	private void buildCheckBoxList() {
		listeCheckBox = this.controleur.constructionListeCheckBox();
		for (JCheckBox cb : listeCheckBox) {
			cb.addActionListener(new java.awt.event.ActionListener() {
				@Override
				public void actionPerformed(java.awt.event.ActionEvent evt) {
					if (((JCheckBox)evt.getSource()).isSelected()) {
						activationCheckAll();
					} else {
						checkAll.setSelected(false);
					}
					selectionContextes();
				}
			});
			panelCheckBox.add(cb);
		}
		panelCheckBox.updateUI();
	}

	private void activationCheckAll() {
		for (JCheckBox cb : listeCheckBox) {
			if (!cb.isSelected()) {
				return;
			}
		}
		checkAll.setSelected(true);
	}

	private void selectionContextes() {
		LinkedList<JCheckBox> listeActives = new LinkedList<JCheckBox>();
		for (JCheckBox cb : listeCheckBox) {
			if (cb.isSelected()) {
				listeActives.add(cb);
			}
		}
		controleur.selectionnerTachesContextes(listeActives, listeTachesModel);
	}

	private void selectAllCkeckbox(boolean bool) {
		for (JCheckBox cb : listeCheckBox) {
			cb.setSelected(bool);
		}
	}

	public void compteCharge(boolean estCharge) {
		panelContextes.setEnabled(estCharge);
		labelContextes.setEnabled(estCharge);
		checkAll.setEnabled(estCharge);
		listeTaches.setEnabled(estCharge);
		labelListeTache.setEnabled(estCharge);
		tableTache.setEnabled(estCharge);
	}

	public void actaliser()
	{
		actualiserCheckBox();
		actualiserListeTache();
		actualiserTableauTache();
	}
	
	public void actualiserCheckBox() {
		for (JCheckBox cb : listeCheckBox) {
			panelCheckBox.remove(cb);
		}
		listeCheckBox.clear();
		buildCheckBoxList();
	}
	
	public void actualiserListeTache() {
		selectionContextes();
		listeTaches.setSelectedIndex(0);
	}

	public void actualiserTableauTache() {
		selectionContextes();
	}

}